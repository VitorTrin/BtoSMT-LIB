1- Lista de critérios a serem avaliados

    Teorias Suportadas- O solver tem de ser capaz de lidar com todas as teorias envolvidas no teste. Uma teoria em especial e muito relevante é a teoria de conjuntos.

    Documentação- Quanto melhor a documentação, mais fácil a interação com o solver. Uma ferramenta com documentação fraca ou incompleta obriga a tentativa e erro.

    Licença- A licença precisa permitir esse tipo de uso.

    Em desenvolvimento- Aplicações em desenvolvimento são capazes de melhorar.É possível para sugerir novas melhorias para uma ferramenta em desenvolvimento para melhor atender nossas necessidades

    Retorna casos que satisfazem- Dizer, dado as restrições do teste, qual o conjunto de valores que satisfazem essas restrições e permitem a avaliação do teste.Ponto principal para o nosso uso. Sem o retorno dos casos que satisfazem, sem utilidade.

    Usado por ferramentas de B- Indica que a compatibilidade com B já foi alcançada.

    Tamanho da base de usuários- Solvers com base de usuários maiores possuem menos chances de serem abandonados e tendem a se desenvolver mais rápido.

    Possui API e sua linguagem- Beta pode se comunicar com ele de modo transparente para o usuário.

    Linguagem de entrada- Modo de entrada padrão.

2- Ferramentas a serem analisadas

    CVC4- Projeto em conjunto da University of Iowa e a New York University, seu antecessor mais antigo, o SVC, é de 1996. Já passou por vários refatoramentos.  http://cvc4.cs.stanford.edu/

    Z3- Solver da Microsoft Research https://github.com/Z3Prover/z3

    Alt-Ergo- Solver criado em conjunto pelos Laboratoire de Recherche en Informatique, Inria Saclay Ile-de-France  e o CNRS, 2006. http://alt-ergo.lri.fr/

    {log}- Uma língua de Constraint Logic Programming baseda em Prolog voltada para manipulação de conjuntos http://people.dmi.unipr.it/gianfranco.rossi/setlog.Home.html

    ProB- Um animador, constraint solver e validador de modelos para B. É a ferramenta em uso atualmente para nosso problema. https://www3.hhu.de/stups/prob/index.php/Main_Page

3- Avaliação dos solvers


    Nome: CVC4

    Site: http://cvc4.cs.stanford.edu/

    Teorias Suportadas: Equality over free (aka uninterpreted) function and predicate symbols, real and integer linear arithmetic, bit-vectors, arrays, tuples, records, user-defined inductive datatypes, strings, finite sets, separation logic.
    Não suporta Sets completamente, por exemplo última versão estável (1.4) não suporta univset.

    Documentação: Boa para API, necessário o uso da documentação do CVC3 na linguagem própria, terceriza parte da documentação SMT-LIB

    Licença: CVC4 é All rights reserved, o código fonte é BSD

    Em desenvolvimento: sim, múltiplos commits diários

    Retorna casos que satisfazem: sim.

    Usado por ferramentas de B: É usado por Rodin

    Tamanho da base de usuários: a página da wiki lista GPUVerify e Stardust como projetos de terceiros que usam CVC4. Mais de 20 perguntas com a tag CVC4 no stackoverflow. 148 estrelas no repositório do github.

    Possui API e sua linguagem: Possui uma API em C++

    Linguagem de entrada: Possui uma linguagem própria e aceita SMT-LIB

--------------------------------------------------------------------------------------------------------------------------------------------------------

    Nome: {log}

    Site: http://people.dmi.unipr.it/gianfranco.rossi/setlog.Home.html

    Teorias Suportadas: Sets (Muito poderoso nisso, segundo a documentação), Integers

    Documentação: Possui exemplos, manual em http://people.dmi.unipr.it/gianfranco.rossi/SETLOG/manual_4_9_1.pdf

    Em desemvolvimento: último update 01/17 no beta, último estável 04/2016

    Retorna casos que satisfazem: Sem informação por enquanto

    Usado por ferramentas de B: Nenhuma conhecida

    Tamanho da base de usuários: Nenhuma conhecida

    Possui API e sua linguagem: Nenhuma conhecida

    Linguagem de entrada: Baseada em Prolog

------------------------------------------------------------------------------------------------------------------------------------------------------

    Nome: Z3

    Site: https://github.com/Z3Prover/z3

    Teorias Suportadas: uninterpreted funcitions, arrays, bitvectors, bitvectors arrays, reals, ints, difference logic over integers, nonlinear, quantifiers. Em Descriptores SMT: AUFLIA, AUFLIRA, AUFNIRA, LRA, QF_ABV, QF_AUFBV, QF_UFBV, QF_AUFLIA, QF_AX, QF_BV, QF_IDL, QF_RDL, QF_LIA, QF_LRA, QF_NIA, QF_NRA, QF_UF, QF_UFID, QF_UFLIA, QF_UFLRA, QF_UFNRA, UFLRA, UFNIA, UFBV, QF_S, QF_FD. Não suporta sets.

    Licença: MIT

    Documentação: Documentação simples da API, tutorial introdutório de como usar em SMT-LIB bem detalhado, teoria por teoria https://github.com/Z3Prover/z3/wiki/Documentation

    Em desenvolvimento: múltiplos commits diários, última versão estável lançada em 7/11/2016

    Retorna casos que satisfazem: Sim, supporta get-value

    Usado por ferramentas de B: Usado por Rodin

    Tamanho da base de usuários: mais de 1600 perguntas com  tag z3 no stackoverflow, mais de 2,200 estrelas no github

    Possui API e sua linguagem: C, C#, Java, Python,

    Linguagem de entrada: SMT-LIB

--------------------------------------------------------------------------------------------------------------------------------------------------------

    Nome: Alt-Ergo

    Site: http://alt-ergo.lri.fr/

    Teorias Suportadas: the free theory of equality with uninterpreted symbols, linear arithmetic over integers and rationals, non-linear arithmetic, polymorphic functional arrays, enumerated datatypes, record datatypes, associative and commutative (AC) symbols, fixed-size bit-vectors.

    Licença: CeCILL-C

    Documentação: https://github.com/OcamlPro/alt-ergo/blob/master/INSTALL.md, muito voltada para instalação e funcionamento interno

    Em desenvolvimento: Última release estável 21/11/2016, sem commits desde então

    Retorna casos que satisfazem: (não testado)

    Usado por ferramentas de B: Atelier-B, Rodin

    Tamanho da base de usuários: mas de 20 estrelas no github, usado na plataforma Why3

    Possui API e sua linguagem:

    Linguagem de entrada: Linguagem Prória

--------------------------------------------------------------------------------------------------------------------------------------------------------

    Nome: ProB

    Site:https://www3.hhu.de/stups/prob/index.php/Main_Page

    Teorias Suportadas: Todas de B

    Licença: EPL v1.0

    Documentação: https://www3.hhu.de/stups/prob/index.php/Tutorial, bem extenso e completo

    Em desenvolvimento: Sim

    Retorna casos que satisfazem: Sim

    Tamanho da base de usuários: Siemens, Alstom, AtelierB, Rodin

    Possui API e sua linguagem: Sim, Java

    Liguagem de entrada: B
